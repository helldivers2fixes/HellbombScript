
name: Create Hellbomb Script EXE and Update Security Info

permissions:
  contents: write  # Needed for PR creation

on:
  push:
    branches:
      - main

env:
  SHORT_SHA: ${{ github.sha }}

jobs:
  build-exe:
    runs-on: windows-latest
    outputs:
      exe_filename: ${{ steps.get_filename.outputs.output_filename }}
      exe_hash: ${{ steps.hash.outputs.exe_sha256 }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install PS2EXE module
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name PS2EXE -Force

      - name: Get version and commit hash
        id: get_filename
        shell: pwsh
        run: |
          $scriptContent = Get-Content -Path "./Hellbomb Script.ps1" -Raw
          If ($scriptContent -match '\|\|\s+Version\s+(\d\.\d+)') {
            $version = $matches[1]
            $shortCommit = "${{ env.SHORT_SHA }}".Substring(0, 7)
            $fileName = "Hellbomb_Script_v${version}-${shortCommit}.exe"
            Write-Output "output_filename=$fileName" >> $env:GITHUB_OUTPUT
            Write-Output "output_version=$version" >> $env:GITHUB_OUTPUT
            Write-Host "Detected version $version. Output file will be named $fileName."
          } Else {
            Write-Error "Could not find a version number in Hellbomb Script.ps1."
            Exit 1
          }

      - name: Compile script to EXE
        shell: pwsh
        run: |
          Invoke-ps2exe `
          -inputFile "./Hellbomb Script.ps1" `
          -outputFile "${{ steps.get_filename.outputs.output_filename }}" `
          -x64 `
          -requireAdmin `
          -UNICODEEncoding `
          -version "${{ steps.get_filename.outputs.output_version }}" `
          -description "Troubleshoots Helldivers 2 Issues" `
          -copyright "Â© 2025" `
          -title "Hellbomb Script" `
          -iconFile "./Bomb.ico"

      - name: Calculate SHA256 of EXE
        id: hash
        shell: pwsh
        run: |
          $hash = Get-FileHash "${{ steps.get_filename.outputs.output_filename }}" -Algorithm SHA256
          Write-Output "exe_sha256=$($hash.Hash)" >> $env:GITHUB_OUTPUT
          
      - name: Calculate SHA256 of PS1
        id: ps1_hash
        shell: pwsh
        run: |
          $hash = Get-FileHash "./Hellbomb Script.ps1" -Algorithm SHA256
          Write-Output "ps1_sha256=$($hash.Hash)" >> $env:GITHUB_OUTPUT

      - name: Upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: compiled-exe
          path: "${{ steps.get_filename.outputs.output_filename }}"

  update-security-info:
    needs: build-exe
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Update SECURITY.md with new hashes and links
        run: |
         python .github/scripts/update_security_info.py \
         working-directory: ${{ github.workspace }} \
         "${{ steps.exe_hash.outputs.exe_sha256 }}" \
         "${{ steps.get_filename.outputs.output_filename }}" \
         "${{ steps.ps1_hash.outputs.ps1_sha256 }}" \
         "${{ steps.get_filename.outputs.output_filename }}"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: "Update Security Info section with latest EXE SHA256"
          title: "Automated update of Security Info section"
          body: "This PR updates the Security Info section in SECURITY.md with the latest EXE SHA256 hash and links."
          branch: "auto/security-info-update"
