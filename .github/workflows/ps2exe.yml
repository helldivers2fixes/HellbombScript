# This workflow compiles the PowerShell script to an EXE,
# calculates hashes for both the EXE and PS1 files,
# and then runs a Python script to update the SECURITY.md file.
# Finally, it creates a pull request with the changes.

name: Build Hellbomb Script EXE & Update Hashes

# Grant write permissions to the 'contents' scope
# This is necessary for the create-pull-request action
permissions:
  contents: write
  pull-requests: write

on:
  push:
    branches:
      - main

env:
  # Store the short SHA for use in filenames
  SHORT_SHA: ${{ github.sha }}
  # Define the PS1 script name as an env var for consistency
  PS1_SCRIPT_NAME: "Hellbomb Script.ps1"

jobs:
  build-exe:
    runs-on: windows-latest
    # Define the outputs for this job
    outputs:
      exe_filename: ${{ steps.get_filename.outputs.output_filename }}
      exe_hash: ${{ steps.hash.outputs.exe_sha256 }}
      ps1_hash: ${{ steps.ps1_hash.outputs.ps1_sha256 }} # Added ps1_hash output

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Cache compiled EXE
        uses: actions/cache@v4
        id: exe-cache
        with:
          path: ./artifact
          key: hellbomb-exe-${{ hashFiles('Hellbomb Script.ps1') }}
          restore-keys: |
            hellbomb-exe-

      - name: Cache PowerShell modules
        uses: actions/cache@v4
        with:
          path: C:\Users\runneradmin\Documents\PowerShell\Modules
          key: ps2exe-modules-${{ runner.os }}-${{ hashFiles('**/*.ps1') }}
          restore-keys: |
            ps2exe-modules-${{ runner.os }}-

      - name: Install PS2EXE module
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name PS2EXE -Force

      - name: List installed PowerShell modules
        shell: pwsh
        run: Get-Module -ListAvailable

      - name: Get version and commit hash
        id: get_filename
        shell: pwsh
        run: |
          $scriptContent = Get-Content -Path "./${{ env.PS1_SCRIPT_NAME }}" -Raw
          If ($scriptContent -match '\|\|\s+Version\s+(\d\.\d+)') {
            $version = $matches[1]
            $shortCommit = "${{ env.SHORT_SHA }}".Substring(0, 7)
            # Note: Using underscores as they are generally safer for filenames
            $fileName = "Hellbomb_Script_v${version}-${shortCommit}.exe"
            Write-Output "output_filename=$fileName" >> $env:GITHUB_OUTPUT
            Write-Output "output_version=$version" >> $env:GITHUB_OUTPUT
            Write-Host "Detected version $version. Output file will be named $fileName."
          } Else {
            Write-Error "Could not find a version number in ${{ env.PS1_SCRIPT_NAME }}."
            Exit 1
          }

      - name: Compile script to EXE
        # Only compile if the cache misses. If it hits, the file is already on disk.
        if: steps.exe-cache.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          # Create artifact directory if a cache miss and the folder doesn't exist
          if (-not (Test-Path -Path ./artifact)) { New-Item -Path ./artifact -ItemType Directory }
          Invoke-ps2exe `
            -inputFile "./${{ env.PS1_SCRIPT_NAME }}" `
            -outputFile "./artifact/${{ steps.get_filename.outputs.output_filename }}"
            -x64 `
            -requireAdmin `
            -UNICODEEncoding `
            -version "${{ steps.get_filename.outputs.output_version }}" `
            -description "Troubleshoots Helldivers 2 Issues" `
            -copyright "Â© 2025" `
            -title "Hellbomb Script" `
            -iconFile "./Bomb.ico"
            
      - name: Upload executable artifact
        if: steps.exe-cache.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: hellbomb-exe
          path: "./artifact/${{ steps.get_filename.outputs.output_filename }}"
          
      - name: Calculate EXE hash    
        id: hash
        shell: pwsh
        run: |
          # Use Get-ChildItem to safely locate the single EXE file in the artifact folder
          $exePath = Get-ChildItem ./artifact/*.exe | Select-Object -First 1
          if (-not $exePath) {
              Write-Error "Could not find an EXE file in the ./artifact directory."
              Exit 1
          }
          $hash = Get-FileHash $exePath.FullName -Algorithm SHA256
          Write-Output "exe_sha256=$($hash.Hash)" >> $env:GITHUB_OUTPUT

      - name: Calculate SHA256 of PS1
        id: ps1_hash
        shell: pwsh
        run: |
          $hash = Get-FileHash "./${{ env.PS1_SCRIPT_NAME }}" -Algorithm SHA256
          Write-Output "ps1_sha256=$($hash.Hash)" >> $env:GITHUB_OUTPUT

  update-security-info:
    # This job depends on the build-exe job completing successfully
    needs: build-exe
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.x'

      - name: Update SECURITY.MD with new hashes and links
        # This step should always run to ensure SECURITY.MD is updated if a new build occurred.
        # Rely on the git diff command below to prevent commits if the content hasn't changed.
        working-directory: ${{ github.workspace }}
        run: |
          python .github/scripts/update_security_info.py \
          "${{ needs.build-exe.outputs.exe_hash }}" \
          "${{ needs.build-exe.outputs.exe_filename }}" \
          "${{ needs.build-exe.outputs.ps1_hash }}" \
          "${{ env.PS1_SCRIPT_NAME }}"

      - name: Create and push branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b auto/security-info-update
          git add SECURITY.MD
          # Check if there are any changes staged for commit. If not, gracefully exit.
          git diff --cached --quiet && echo "No changes to commit" && exit 0
          git commit -m "docs(security): Update SECURITY.md with latest hashes"
          git push origin auto/security-info-update
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
